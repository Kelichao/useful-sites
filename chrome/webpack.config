const webpack            = require('webpack');
const CommonsChunkPlugin = require("webpack/lib/optimize/CommonsChunkPlugin");
const path               = require('path');
const fs                 = require("fs");
const minimist           = require('minimist');
const srcDir             = path.resolve(process.cwd(), 'src/').replace(/\\/g,"/");
const config             = require(srcDir+'/js/config'); //引入js模块配置文件

//const rules              = require('./rules')

// 通过接收npm参数，判断是生产模式还是开发模式
const isProduct          = process.argv[2] === 'build';
const argv               = minimist(process.argv.slice(2));
const platform           = argv.platform ? argv.platform : 'browser';


let buildPath;
if(platform === "weixin" || platform === "browser"){
    buildPath = path.resolve(process.cwd(), 'dist') + '/' + platform + '/';
}else{
    buildPath = path.resolve(process.cwd(), 'app/www')+'/';
}

const assetsPath         = buildPath+'assets/';


var webpackConfig = {
    entry: {
        app:srcDir+'/js/platform/'+platform+'.js'
    },
    output: {
        path: assetsPath,
        publicPath: './assets/',
        filename: "js/app.js",
        chunkFilename: "js/pages/[name]_[chunkhash].js"
    },
    resolve: {
        root: [srcDir],
        alias: config.alias
    },
    module: {
        loaders: [
          {
            test: /\.js$/,
            loader: 'babel-loader',
            exclude: /node_modules/
          }
        ]
    },
    plugins: [
        new webpack.DefinePlugin({
            __PLATFORM__:JSON.stringify(platform)
        }),
        new webpack.ProvidePlugin(config.global),
        new CommonsChunkPlugin('js/common.js'),

        new webpack.HotModuleReplacementPlugin() //热加载
    ]
};

module.exports = webpackConfig;



